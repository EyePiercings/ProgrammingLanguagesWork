
/* 
3a. Only one class, 'class Division', would be added 
because the division class would not require any 
additional methods/changes to any existing classes. 

3b. n+1 because we would needd to change all the 
other classes to add the functionality of drawing 
parse trees.

3c.

    
*/

/** Abstract class for all expressions */
abstract class Expr {
    abstract <T> T accept(Visitor<T> v);
}

class Number extends Expr {
    protected int n;

    public Number(int n) { this.n = n; }

    public <T> T accept(Visitor<T> v) {
	return v.visitNumber(this.n);
    }
}

class Sum extends Expr {
    protected Expr left, right;

    public Sum(Expr left, Expr right) {
	this.left = left;
	this.right = right;
    }

    public <T> T accept(Visitor<T> v) {
	return v.visitSum(left.accept(v), right.accept(v));
    }
}

class Times extends Expr {
    protected Expr left, right;

    public Times(Expr left, Expr right) {
	this.left = left;
	this.right = right;
    }

    public <T> T accept(Visitor<T> v) {
	return v.visitTimes(left.accept(v), right.accept(v));
    }
}

class Subtract extends Expr {
    protected Expr left, right;

    public Subtract(Expr left, Expr right) {
	this.left = left;
	this.right = right;
    }

    public <T> T accept(Visitor<T> v) {
	return v.visitSubtract(left.accept(v), right.accept(v));
    }
}


/** Abstract class for all visitors */
abstract class Visitor<T> {
    abstract T visitNumber(int n);
    abstract T visitSum(T left, T right);
    abstract T visitTimes(T left, T right);
    abstract T visitSubtract(T left, T right);
}

/** Example visitor to convert an Expr to a String */
class ToString extends Visitor<String> {
    public String visitNumber(int n) { 
	return "" + n;
    }
    public String visitSum(String left, String right) {
	return "(" + left + " + " + right + ")";
    }
    public String visitTimes(String left, String right) {
	return "(" + left + "*" + right + ")";
    }
    public String visitSubtract(String left, String right) {
	return "(" + left + "-" + right + ")";
    }
}

class Eval extends Visitor<Integer> {
    public Integer visitNumber(int n) {
	return n;
    }
    public Integer visitSum(Integer left, Integer right) {
	return left + right;
    }
    public Integer visitTimes(Integer left, Integer right) {
	return left * right;
    }
    public Integer visitSubtract(Integer left, Integer right) {
	return left - right;
    }
}


public class ExprVisitor { 
    public static void main(String args[]) { 
	Expr e = new Subtract(new Number(3), new Number(2));
	Expr z = new Times(new Number(3), new Number(2)); 
	ToString printer = new ToString();
	Eval evaluator = new Eval();
	String stringRep = e.accept(printer);
	int realEval = z.accept(evaluator);
	System.out.println(stringRep);
	System.out.println(realEval);
	realEval = e.accept(evaluator);
	System.out.println(realEval);
    }

}
